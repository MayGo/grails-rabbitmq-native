This is a quick and dirty how-to detailing how to quickly begin using the plugin. While there is a lot of configurability offered by this plugin, this is a very basic demonstration of its usage.

h3. Create The Application
Create a project named *RabbitExample*. You can do this by entering:
{code}
grails create-app RabbitExample
{code}

h3. Add The Plugin
In @grails-app/conf/BuildConfig.groovy@, under the @plugins@ section, add:
{code}
    plugins {
        // ...

        compile name: "rabbitmq-native", version: "latest.release"

        // ...
    }
{code}

Then, refresh the project's dependencies:
{code}
grails refresh-dependencies
{code}

h3. Configuring
In @grails-app/conf/Config.groovy@, add:
{code}
rabbitmq {
    connection = {
        connection host: "changeme", username: "changeme", password: "changeme"
    }
    queues = {
        queue name: "testqueue"
    }
}
{code}
{note}
Be sure to replace the appropriate values for your RabbitMQ server and user credentials.
{note}

h3. Consumer
Create the a consumer by using the following command:
{code}
grails create-consumer com.example.Test
{code}

Update the consumer to reflect the following:
{code}
package com.example

import com.budjb.rabbitmq.consumer.MessageContext

class TestConsumer {
    /**
     * Consumer configuration.
     */
    static rabbitConfig = [
        queue: "testqueue"
    ]

    /**
     * Handle an incoming RabbitMQ message.
     *
     * @param body    The converted body of the incoming message.
     * @param context Properties of the incoming message.
     * @return
     */
    def handleMessage(def body, MessageContext context) {
        println body
        return "Hello to you, too!"
    }
}
{code}

h3. Controller
Create a controller by using the following command:
{code}
grails create-controller com.example.Test
{code}

Update the controller to reflect the following:
{code}
package com.example

import com.budjb.rabbitmq.publisher.RabbitMessagePublisher

class TestController {
    RabbitMessagePublisher rabbitMessagePublisher

    def index() {
        render rabbitMessagePublisher.rpc {
            routingKey = "testqueue"
            body = "Hello!"
        }
    }
}
{code}

h4. Run it!
Run the grails application.
{code}
grails run-app
{code}

You can see the application in action by hitting the test controller. If you're running this on your localhost, your URL may be similar to @http://localhost:8080/RabbitExample/test/index@.
You should see the message "Hello!" printed the application's output console, and your web browser should dispay the message "Hello to you, too!"
